/**
 * Sectioning
 * Container and responsive spacings for header, main, footer
 */

// Reboot based on :
// - normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css
// - sanitize.css v13.0.0 | CC0 1.0 Universal | github.com/csstools/sanitize.css
// ––––––––––––––––––––

// html {
//     width: 1900px;
//     position: relative;
//     margin: 0;
// }

:root {
    --max-page-width: 1200px;
}
// Render the `main` element consistently in IE
main {
  display: block;
  max-width: 1200px;
}

body {
  padding-top: constant(safe-area-inset-top); /* For iOS 11.0-11.2 */
  padding-top: env(safe-area-inset-top); /* For iOS 11.2+ */
}

// fundamental site structure made of flexboxes
.wrapper {
  display: flex;
  flex-wrap: wrap;
}

.wrapper > * {
  padding: calc(var(--spacing) * 1.5);
  flex: 1 100%;
}

.header {
    display: flex;
    justify-content: space-between;
    align-items: flex-end;
    padding: calc(var(--spacing) * 1.5);
}

// see below too!
.footer {
    display: block;
    position: fixed;
    font-size: 0.8rem;
    left: 0;
    bottom: 0;
    width: 100%;
    text-align: center;
    padding: 0;
    padding-bottom: 1rem;
    background: var(--background-color);
}

// this makes the crisp border ontop of the footer
.footer::before {
  content: "";
  display: block;
  height: 0;
  border-top: 1px solid var(--secondary);
  width: 60%; /* Set the width to 35% */
  padding-top: var(--spacing);
  margin: 0 auto; /* Center the element horizontally */
}

.main-content {
  text-align: left;
  width: var(--main-content-width);
  padding: calc(var(--spacing) * 1.5);
  padding-bottom: calc(var(--spacing) * 6); // need to take footer height into account
}

/*code for left sidebar */
.aside-1 {
  display: flex;
  flex-flow: column wrap;
  gap: 0.5em;
  --offset: var(--spacing);
  align-self: start;
  text-align: right;
  padding-top: calc(var(--spacing) * 6);
  position: sticky;
  top: var(--offset);
  max-height: calc(100vh - var(--spacing) * 2);
}

/*code for right sidebar */
.aside-2 {
    padding-top: calc(var(--spacing) * 6);
}

/* from: https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-examples */
@media all and (min-width: 960px) {
  .aside { flex: 1 0 0; }
  .main-content { flex: 3 0px; }
  .aside-1      { order: 1; }
  .main-content { order: 2; }
  .aside-2      { order: 3; }
}

@media only screen and (max-width: 960px) {
  .aside-1 {
        padding-top: var(--spacing);
        flex-direction: row;
        text-align: left;
        position: inherit;

    }
    .main-content {
        width: 100%;
    }
    .footer {
       position: relative;
       left: 0;
       width: 100%;
    }

}
// Pico
// ––––––––––––––––––––

// 1. Remove the margin in all browsers (opinionated)
#{$semantic-root-element} {
  width: 100%;
  margin: 0; // 1

  > header,
  > main,
  > footer {
    width: 100%;
    margin-right: auto;
    margin-left: auto;

    // Semantic container
    @if $enable-semantic-container {
      padding: var(--block-spacing-vertical) var(--block-spacing-horizontal);

      // Centered viewport
      @if $enable-viewport {
        @if map-get($breakpoints, "sm") and $enable-viewport {
          @media (min-width: map-get($breakpoints, "sm")) {
            max-width: map-get($viewports, "sm");
            padding-right: 0;
            padding-left: 0;
          }
        }

        @if map-get($breakpoints, "md") and $enable-viewport {
          @media (min-width: map-get($breakpoints, "md")) {
            max-width: map-get($viewports, "md");
          }
        }

        @if map-get($breakpoints, "lg") and $enable-viewport {
          @media (min-width: map-get($breakpoints, "lg")) {
            max-width: map-get($viewports, "lg");
          }
        }

        @if map-get($breakpoints, "xl") and $enable-viewport {
          @media (min-width: map-get($breakpoints, "xl")) {
            max-width: map-get($viewports, "xl");
          }
        }
      }
    }

    // Semantic container
    @else {
      padding: var(--block-spacing-vertical) 0;
    }
  }
}
