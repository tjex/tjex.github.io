---
import ArticleSchema from "../components/ArticleSchema.astro";
import Date from "../components/utility/DateFormat.astro";
import path from 'node:path';

import Layout from "./Base.astro";
import SideLeftPage from "../components/SideLeftPage.astro";
import SideRightBlank from "../components/SideRightBlank.astro";
import HeaderCenter from "../components/HeaderCenter.astro";
import HeaderLeft from "../components/HeaderLeft.astro";
import HeaderRight from "../components/HeaderRight.astro";
import Tags from "../components/Tags.astro";
import Footer from "../components/Footer.astro";

const { seo } = Astro.props;
const { post } = Astro.props;

// cobble together a valid url for GitHub
const pathname = Astro.url.pathname.replace(/\/$/, "")
const ext = path.extname(post.id)
const postGithubUrl =  new URL('https://github.com/tjex/tjex.github.io/commits/main/src/content' + pathname + ext)
---

<script src="../scripts/emailDecode.js"></script>

<Layout {seo}>
    <Fragment slot="head-bottom">
        <ArticleSchema {post} />
    </Fragment>
  <HeaderLeft slot="header-left" />
  <HeaderCenter slot="header-center" />
  <HeaderRight slot="header-left" />
    <SideLeftPage slot="side-left" />
    <article class="post-content__article">
        <h1>{post.data.title}</h1>
        <p class="post-info">
      <span>Tillman Jex,</span> <span class="pub-date"><Date date={post.data.arvDate} format={"arvelie"} /></span><br>

            <span class="secondary">Tagged: </span> <Tags tags={post.data.tags} 
            style={"text"} />

            <br>

            <!-- if the post has been modified since original publication -->
            {
                post.data.modDate ? (
                <span class="secondary"> Updated: </span><a rel="me" href=`${postGithubUrl}`> <Date date={post.data.modDate} format={"MDY"}/> </a> ) : null
            }
            <br>


            <!-- for posts that refer to computer programs used -->
        {
          post.data.progVersions ? (
            <span>
              <span class="secondary">Versions: </span>
              {post.data.progVersions.map((v: string, index) => (
                <span>
                  {v}
                  {index !== post.data.progVersions.length - 1 && ", "}
                </span>
              ))}
            </span>
          ) : null
        }

        </p>

        <slot />
    </article>
    <SideRightBlank slot="side-right" />
    <Footer slot="footer" />
</Layout>
